//C_cyp_query merge
//https://github.com/wirsel/neoj/blob/master/cyphers/C_cyp_query/C_cyp_query-merge.cyp.txt
with { dt: datetime() } as cx
with apoc.map.merge( cx ,{identifier: "nodes.level.type > types.type.name"} ) as cx  
with apoc.map.merge( cx ,{delete: false} ) as cx
with cx, [
'with $cx as cx',
'with cx, cx.cf["nodes.level"+cx.level+".type"] as link',
'with cx, CASE WHEN link starts with "£cf." THEN coalesce(cx.cf[replace(link,"£cf.","")],link) ELSE link END as buf',
'with cx, CASE WHEN buf starts with "£cf." THEN coalesce(cx.cf[ replace(buf,"£cf.","")+".name"],buf) ELSE buf END as type',
'with apoc.map.merge(cx, {type:type}) as cx',
'return cx'
] as cyp_lines
with apoc.map.merge( cx, {cyp_lines:cyp_lines }) as cx

//---- create C_log node ------------------
CREATE(nLg:C_log {identifier:apoc.convert.toString(cx.dt)})
Set nLg.name= nLg.identifier
set nLg.type= "C_log"
set nLg.step_last=0
set nLg.steps=[]
set nLg.comments=[]
set nLg.steps=nLg.steps + [size(nLg.steps+1)]
set nLg.comments=nLg.comments + ["nLg created"]
set nLg.cx=apoc.convert.toString(cx)

//---- delete existing  C_cyp_line nodes and C_cyp_line  node  if required---------
with cx, nLg
CALL apoc.do.when(cx.delete = true,'
with $cx as cx, $nLg as nLg
MATCH(cyp:C_cyp_query {identifier:cx.identifier})-[:HAS_LINE]->(l:C_cyp_line)
with cx, nLg, collect(l) as nodes
with cx, nLg, nodes, size(nodes) as cnt
UNWIND range(0, size(nodes)-1) as x
with cx, nLg, cnt, x, nodes[x] as node
detach delete node
with cx, nLg, cnt, 
COLLECT(x) as coll
set nLg.steps=nLg.steps + [size(nLg.steps+1)]
set nLg.comments=nLg.comments + ["C_cyp_line deleted = " + tostring(cnt)]
return cnt as cnt
', 'return 0', {cx:cx, nLg:nLg} ) YIELD value

//---- delete existing  C_cyp_query node if required---------
with cx, nLg
CALL apoc.do.when(cx.delete = true,'
with $cx as cx, $nLg as nLg
MATCH(cyp:C_cyp_query {identifier:cx.identifier})
with cx, nLg, collect(cyp) as nodes
with cx, nLg, nodes, size(nodes) as cnt
UNWIND range(0, size(nodes)-1) as x
with cx, nLg, cnt, x, nodes[x] as node
detach delete node
with cx, nLg, cnt, 
COLLECT(x) as coll
set nLg.steps=nLg.steps + [size(nLg.steps+1)]
set nLg.comments=nLg.comments + ["C_cyp_query deleted = " + tostring(cnt)]
return cnt as cnt
', 'return 0', {cx:cx, nLg:nLg} ) YIELD value

//---- MERGE  C_cyp_query ---------
MERGE(cyp:C_cyp_query {identifier:cx.identifier})
on create set cyp.name = cyp.idenytifier, cyp.type = "C_cyp_query", cyp.createdAt = cx.dt, cyp.status="new"
on match set cyp.status = "actual"
with cx, nLg, cyp
set nLg.steps=nLg.steps + [size(nLg.steps+1)]
set nLg.comments=nLg.comments + ["cyp merged = " + cx.identifier]

//---- flag existing C_cyp_line nodes for update-------
with *
OPTIONAL MATCH(cyp)-[ee:HAS_LINE]->(l:C_cyp_line)
set l.status = "to be updated"
set ee.status = "to be updated"
with cx, nLg, cyp, l order by l.index
with cx, nLg, cyp,
COLLECT(l) as lines_before
set nLg.steps=nLg.steps + [size(nLg.steps+1)]
set nLg.comments=nLg.comments + ["C_cyp_line flagged for update = cnt = " +tostring(size(lines_before))]

//---- flag existing C_cyp_line nodes and HAS_LINE edges for update-------
with *
OPTIONAL MATCH(cyp)-[ee:HAS_LINE]->(l:C_cyp_line)
set ee.status = "to be updated"
with cx, nLg, cyp, lines_before, ee, l order by l.index
with cx, nLg, cyp, lines_before, 
COLLECT(ee) as HAS_LINEs_before
set nLg.steps=nLg.steps + [size(nLg.steps+1)]
set nLg.comments=nLg.comments + ["HAS_LINE flagged for update = cnt = " +tostring(size(HAS_LINEs_before))]

//---- flag existing NEXT_LINE edges for update-------
with *
CALL apoc.do.when(size(lines_before)>0,'
UNWIND $lines_before as line_before
OPTIONAL MATCH (line_before)-[eee:NEXT_LINE]->(:C_cyp_line)
Set eee.status= "to be updated"
return COLLECT(eee) as NEXT_LINEs_before
',
'with [] as NEXT_LINEs_before return NEXT_LINEs_before', 
{lines_before:lines_before} ) YIELD value
with *, value.NEXT_LINEs_before as NEXT_LINEs_before
set nLg.steps=nLg.steps + [size(nLg.steps+1)]
set nLg.comments=nLg.comments + ["NEXT_LINE flagged for update = cnt = " + toString(size(NEXT_LINEs_before))]

//---- MERGE C_cyp_line-------
with *
UNWIND range(0,size(cx.cyp_lines)-1) as x
with *, cx.cyp_lines[x] as lineStr
MERGE(line:C_cyp_line {identifier: tostring(x)+"/"+lineStr})
on create set line.name = line.identifier, line.line=lineStr,  line.type = "C_cyp_line", line.index = x, line.status = "new", line.createdAt=cx.dt
on match set line.status = "actual" 
with cx, nLg, cyp, lines_before, HAS_LINEs_before, NEXT_LINEs_before, line order by line.index 
with cx, nLg, cyp, lines_before, HAS_LINEs_before, NEXT_LINEs_before,
COLLECT(line) as lines_after
set nLg.steps=nLg.steps + [size(nLg.steps+1)]
set nLg.comments=nLg.comments + ["LINES merged = " +tostring(size(lines_after))]

//---- MERGE HAS_LINE-------
with *
UNWIND range(0,size(lines_after)-1) as x
with *, lines_after[x] as line
MERGE(cyp)-[e:HAS_LINE]->(line)
on create set e.index = x, e.status = "new", e.createdAt = cx.dt
on match set e.index = x, e.status = "actual"
with cx, nLg, cyp, lines_before, HAS_LINEs_before, NEXT_LINEs_before, lines_after,
COLLECT(e) as HAS_LINEs_after
set nLg.steps=nLg.steps + [size(nLg.steps+1)]
set nLg.comments=nLg.comments + ["HAS_LINE merged = " +tostring(size(HAS_LINEs_after))]

//---- MERGE NEXT_LINE-------
with *
UNWIND range(0, size(lines_after) -2) as x
with *, lines_after[x] as this
with *, lines_after[x+1] as next
MERGE(this)-[e:NEXT_LINE]->(next)
on create set e.status = "new", e.createdAt = cx.dt, e.index=this.index
on match set e.status = "actual"
with cx, nLg, cyp, lines_before, HAS_LINEs_before, NEXT_LINEs_before, lines_after, HAS_LINEs_after,
COLLECT(e) as NEXT_LINEs_after
set nLg.steps=nLg.steps + [size(nLg.steps+1)]
set nLg.comments=nLg.comments + ["NEXT_LINE merged = " +tostring(size(NEXT_LINEs_after))]
with cx, nLg, cyp, lines_before, HAS_LINEs_before, NEXT_LINEs_before, lines_after, HAS_LINEs_after, NEXT_LINEs_after

//---- check not updated C_cyp_line nodes-------
with *, filter( x in lines_before where x.status= "to be updated" ) as before_outdated
CALL apoc.do.when(size(before_outdated)>0,' 
with $before_outdated as before_outdated
UNWIND before_outdated as item
Set item.status = "outdated"
with COLLECT(item) as items
return count(items) as cnt
','return 0', {before_outdated: before_outdated}) YIELD value
set nLg.steps=nLg.steps + [size(nLg.steps+1)]
set nLg.comments=nLg.comments + ["LINES outdated = "+ apoc.convert.toString([x in before_outdated| x.index])]
with cx, nLg, cyp, lines_before, HAS_LINEs_before, NEXT_LINEs_before, lines_after, HAS_LINEs_after, NEXT_LINEs_after

//---- check not updated HAS_LINEs_before edges-------
with *, filter( x in HAS_LINEs_before where x.status= "to be updated" ) as before_outdated
CALL apoc.do.when(size(before_outdated)>0,' 
with $before_outdated as before_outdated
UNWIND before_outdated as item
Set item.status = "outdated"
with COLLECT(item) as items
return count(items) as cnt
','return 0', {before_outdated: before_outdated}) YIELD value
set nLg.steps=nLg.steps + [size(nLg.steps+1)]
set nLg.comments=nLg.comments + ["HAS_LINES outdated = "+ apoc.convert.toString([x in before_outdated| x.index])]
with cx, nLg, cyp, lines_before, HAS_LINEs_before, NEXT_LINEs_before, lines_after, HAS_LINEs_after, NEXT_LINEs_after

//---- check not updated NEXT_LINEs_before edges-------
with *, filter( x in NEXT_LINEs_before where x.status= "to be updated" ) as before_outdated
CALL apoc.do.when(size(before_outdated)>0,' 
with $before_outdated as before_outdated
UNWIND before_outdated as item
Set item.status = "outdated"
with COLLECT(item ) as items
return count(items) as cnt
','return 0', {before_outdated: before_outdated}) YIELD value
set nLg.steps=nLg.steps + [size(nLg.steps+1)]
set nLg.comments=nLg.comments + ["NEXT_LINE outdated = "+ apoc.convert.toString([x in before_outdated| x.index])]

with *
unwind lines_after as line
return cyp, line
//return  this.identifier, next.identifier
