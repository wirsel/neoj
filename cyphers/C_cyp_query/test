//C_cyp_query merge with iterate
//https://github.com/wirsel/neoj/blob/master/cyphers/C_cyp_query/C_cyp_query-merge.cyp.txt

with {} as cxn
with cxn, { dt: datetime() } as cx
//---------------------------------------------
//---- create C_log node ------------------
//---------------------------------------------
CREATE(nLg:C_log {identifier:apoc.convert.toString(cx.dt)})
Set nLg.name= nLg.identifier
set nLg.type= "C_log"
set nLg.step_last=0
set nLg.steps=[]
set nLg.comments=[]
set nLg.steps=nLg.steps + [size(nLg.steps+1)]
set nLg.comments=nLg.comments + ["nLg created"]
with cx, nLg, apoc.map.merge(cxn, {nLg: nLg }) as cxn

with cxn, nLg, apoc.map.merge( cx ,{identifier: "nodes.level.type > types.type.name"} ) as cx  
with cxn, nLg, cx, {
	HAS_LINE:{out:'C_cyp_query' , type:'HAS_LINE', in:'C_cyp_line_pos'},
    NEXT_LINE:{out:'C_cyp_line_pos' , type:'NEXT_LINE', in:'C_cyp_line_pos'},
    HAS_POS:{out:'C_cyp_line' , type:'HAS_POS', in:'C_cyp_line_pos'}
    } as edges
with cxn, nLg, apoc.map.merge(cx, {edges: edges}) as cx

with cxn, nLg, cx, { 
	HAS_LINE:{
    	out:'cx.identifier',
        in: 'toString(item_map.index)+\'/\'+item_map.this' },
    HAS_POS:{
    	out:'item_map.this',
        in: 'toString(item_map.index)+\'/\'+item_map.this'},
    NEXT_LINE:{
		out:'toString(item_map.index)+\'/\'+item_map.this', 		
    	in: 'toString(item_map.index+1)+\'/\'+item_map.next'} 
} as id_maps
with cxn, nLg, apoc.map.merge(cx, {id_maps: id_maps}) as cx

with cxn, nLg, cx, ["HAS_LINE", "NEXT_LINE"] as edges_to_delete
//with cxn, cx, nLg, [] as edges_to_delete
with cxn, nLg, apoc.map.merge(cx, {edges_to_delete:edges_to_delete}) as cx

with cxn, nLg, cx, ['C_cyp_query','C_cyp_line_pos','C_cyp_line' ] as nodes
with cxn, nLg, apoc.map.merge(cx, {nodes: nodes}) as cx

//with cxn, nLg, cx, ["C_cyp_line_pos", "C_cyp_line"] as nodes_to_delete
with cxn, nLg, cx, [] as nodes_to_delete
with cxn, nLg, apoc.map.merge(cx, {nodes_to_delete:nodes_to_delete}) as cx

with cxn, nLg, cx, '
	With $cx as cx
    MATCH(r:<<root_type>> <<root_id_map>>) 
    CALL apoc.path.expand(r,\'HAS_LINE|NEXT_LINE|HAS_POS\',\'+C_cyp_line_pos|+C_cyp_line\',0,2) yield path 	
    return path' 
    as cypherIterate
with cxn, nLg, apoc.map.merge( cx, {cypherIterate: cypherIterate }) as cx
set nLg.cypherIterate=cx.cypherIterate

with *, 'match(out:<<out>> <<out_id>>)-[e:<<type>>]->(in:<<in>> <<in_id>>)  return e' as edge_delete_template
with cxn, nLg, apoc.map.merge(cx, {edge_delete_template: edge_delete_template}) as cx
with *, {batchSize:10000, parallel:false,retries:5, iterateList:false, concurrency:0, failedParams:-1} as iterate_options
with cxn, nLg, apoc.map.merge(cx, {iterate_options: iterate_options}) as cx    

with cxn, nLg, apoc.map.merge( cx ,{delete: true} ) as cx
with cxn, nLg, apoc.map.merge( cx ,{status: {update: "to be updated", new: "new", actual:"actual", history: "history"}} ) as cx
with cxn, nLg, cx, [
'with $cx as cx',
'with cx, cx.cf["nodes.level"+cx.level+".type"] as link',
'with cx, CASE WHEN link starts with "£cf." THEN coalesce(cx.cf[replace(link,"£cf.","")],link) ELSE link END as buf',
'with cx, CASE WHEN buf starts with "£cf." THEN coalesce(cx.cf[ replace(buf,"£cf.","")+".name"],buf) ELSE buf END as type',
'//with apoc.map.merge(cx, {type:type}) as buf1',
'with *, buf1 as cx',
'return cx sdcsdc'
] as cyp_lines
with cxn, nLg, apoc.map.merge( cx, {cyp_lines:cyp_lines }) as cx
with cxn, nLg, apoc.map.merge( cx, {root_id_list:["nodes.level.type > types.type.name"]}) as cx

with cxn, nLg, cx, 'UNWIND range(0, size($items)-1) as x return {index:x, prev:coalesce($items[x-1],null), this:$items[x], next: coalesce($items[x+1],null) } as item_map' as iteration
with cxn, nLg, apoc.map.merge( cx, {iteration:iteration }) as cx

//---------------------------------------------
//----update status for HAS_LINE|NEXT_LINE|HAS_POS-----
//---------------------------------------------

with cxn, cx, nLg,'FOREACH (n IN relationships(path)| SET n.status = $status_update )' as cypherAction
with cxn, nLg, apoc.map.merge( cx, {cypherAction: cypherAction }) as cx

with *, {root_type:"C_cyp_query", root_id_map:"{identifier:cx.identifier}"} as replaces
with *, reduce(s=cx.cypherIterate, x in keys(replaces) | replace(s,"<<"+x+">>",replaces[x])) as iteration

CALL apoc.periodic.iterate(iteration,cx.cypherAction,
{batchSize:10000, parallel:false,retries:5, iterateList:false, concurrency:0, failedParams:-1, params:{cx:cx, status_update:cx.status.update }}) YIELD batches,total, timeTaken, committedOperations, failedOperations, failedBatches, retries, errorMessages, batch, operations, wasTerminated

set nLg.comments=nLg.comments + ["edges updated = committedOperations = " + toString(committedOperations)]

Set nLg.step_0_rel_update= apoc.convert.toString({batches:batches,total:total, timeTaken: timeTaken, committedOperations: committedOperations, failedOperations: failedOperations, failedBatches: failedBatches, retries:retries})
with cxn, cx, nLg

//---------------------------------------------
//----  EDGE delete---
//---------------------------------------------
with *,'
with $cx as cx , $logger as logger
UNWIND cx.edges_to_delete as edge_to_delete
with *, cx.edges[edge_to_delete] as edge_map
with *, apoc.map.merge({out_id:\'\', in_id:\'\',params:\'{}\'},edge_map) as replaces
Set logger.step_1_0 = apoc.convert.toString(replaces)
with *, reduce(s=cx.edge_delete_template, x in keys(replaces) | replace(s,\'<<\'+x+\'>>\', replaces[x])) as cypher
Set logger.step_1_1 = coalesce(logger.step_33,[])+[cypher]
with *
CALL apoc.periodic.iterate(cypher, "delete e",cx.iterate_options) YIELD batches,total, timeTaken, committedOperations, failedOperations, failedBatches, retries, errorMessages, batch, operations, wasTerminated 
Set logger.step_1_edge_delete= apoc.convert.toString({batches:batches,total:total, timeTaken: timeTaken, committedOperations: committedOperations, failedOperations: failedOperations, failedBatches: failedBatches, retries:retries, errorMessages:errorMessages})
with COLLECT(edge_to_delete) as coll
return size(coll) as cnt
' as action
CALL apoc.do.when( size(cx.edges_to_delete)>0,action,"",{cx:cx, logger: nLg}) yield value 
with cx, cxn, nLg, COLLECT(value) as values

//---------------------------------------------
//----  C_cyp_query merge---
//---------------------------------------------
with cxn, cx, nLg, {
	type: 'C_cyp_query',
	identprops:"{identifier:cx.identifier}", 
	props:'{name:cx.identifier, type:$type}',
	on_create_set:'{name:cx.identifier, type:$type, batchtime:dt, createdAt:datetime(), status:$status_create}', 
	on_match_set:'{status:$status_match}'} as replaces 
with *, '
with item_map as item_map, $cx as cx, $dt as dt
MERGE(n:<<type>> <<identprops>>)
on create set n += <<on_create_set>>
on match set n += <<on_match_set>>
' as str
with *, reduce(s=str, x in keys(replaces) | replace(s,'<<'+x+'>>',replaces[x])) as action

set nLg.comments=nLg.comments + ["C_cyp_query merge action = " + action]
with cxn, cx, nLg, action
CALL apoc.periodic.iterate(cx.iteration,action,{batchSize:10000, parallel:false,retries:5, iterateList:false, concurrency:0, failedParams:-1, params:{ cx: cx, status_match:cx.status.actual, status_create:cx.status.new, dt:nLg.dt, items:cx.root_id_list, nCyp:cxn.nCyp, type:"C_cyp_query"  }}) YIELD batches,total, timeTaken, committedOperations, failedOperations, failedBatches, retries, errorMessages, batch, operations, wasTerminated

Set nLg.step_2_C_cyp_query__merge= apoc.convert.toString({batches:batches,total:total, timeTaken: timeTaken, committedOperations: committedOperations, failedOperations: failedOperations, failedBatches: failedBatches, retries:retries, errorMessages:errorMessages})

//---------------------------------------------
//----  C_cyp_line_pos merge---
//---------------------------------------------
with cxn, cx, nLg, {
	type: 'C_cyp_line_pos', 
    id: "toString(item_map.index)+\'/\'+item_map.this",
	identprops:"{identifier:id}", 
	props:'{name:cx.identifier, type:$type}',
	on_create_set:'{index:item_map.index, line:item_map.this, type:$type, name:id, type:$type, batchtime:dt, createdAt:datetime(), status:$status_create}', 
	on_match_set:'{status:$status_match}'} as replaces 

with *, '
with item_map as item_map, $cx as cx, $nCyp as nCyp,$dt as dt
with *, <<id>> as id
with *, <<identprops>> as identprops
MERGE(n:<<type>> <<identprops>>)
on create set n += <<on_create_set>>
on match set n += <<on_match_set>>
' as str
with *, reduce(s=str, x in keys(replaces) | replace(s,'<<'+x+'>>',replaces[x])) as action

set nLg.comments=nLg.comments + ["C_cyp_line_pos merge action = " + action]
with cxn, cx, nLg, action
CALL apoc.periodic.iterate(cx.iteration,action,{batchSize:10000, parallel:false,retries:5, iterateList:false, concurrency:0, failedParams:-1, params:{cx:cx, status_match:cx.status.actual, status_create:cx.status.new, dt:nLg.dt, items:cx.cyp_lines, nCyp:cxn.nCyp, type:"C_cyp_line_pos"  }}) YIELD batches,total, timeTaken, committedOperations, failedOperations, failedBatches, retries, errorMessages, batch, operations, wasTerminated

Set nLg.step_2_C_cyp_line_pos__merge= apoc.convert.toString({batches:batches,total:total, timeTaken: timeTaken, committedOperations: committedOperations, failedOperations: failedOperations, failedBatches: failedBatches, retries:retries, errorMessages:errorMessages})

//---------------------------------------------
//----  C_cyp_line merge---
//---------------------------------------------
with cxn, cx, nLg, {type: 'C_cyp_line'} as replaces
with *, '
with item_map as item_map
with *, $nCyp as nCyp, item_map.this as id
with *, {identifier:id } as identprops
with *, {line:id, type:$type, name:id } as props
MERGE(n:<<type>> {identifier:id})
on create set n.batchtime=$dt, n.createdAt = datetime(), n +=props, n.status=$status_create
on match set n.status=$status_match
' as str
with *, reduce(s=str, x in keys(replaces) | replace(s,'<<'+x+'>>',replaces[x])) as action

set nLg.comments=nLg.comments + ["C_cyp_line merge action = " + action]
with cxn, cx, nLg, action
CALL apoc.periodic.iterate(cx.iteration,action,{batchSize:10000, parallel:false, retries:5, iterateList:false, concurrency:0, failedParams:-1, params:{ status_match:cx.status.actual, status_create:cx.status.new, dt:nLg.dt, items:cx.cyp_lines, nCyp:cxn.nCyp, type:"C_cyp_line_pos"  }}) YIELD batches,total, timeTaken, committedOperations, failedOperations, failedBatches, retries, errorMessages, batch, operations, wasTerminated

Set nLg.step_3_C_cyp_line_merge= apoc.convert.toString({batches:batches,total:total, timeTaken: timeTaken, committedOperations: committedOperations, failedOperations: failedOperations, failedBatches: failedBatches, retries:retries, errorMessages:errorMessages})
with *
match(n:C_cyp_query {identifier:cx.identifier})

Set nLg.step_3 = "match ok"
with cxn, cx, nLg

//---------------------------------------------
//----  EDGE merge --
//---------------------------------------------
UNWIND keys(cx.edges) as edge_type
with *, cx.edges[edge_type] as edge_map, cx.id_maps[edge_type] as id_map
with *, {out_id_cyp: id_map.out, type_out:edge_map.out, edge_type:edge_map.type, type_in:edge_map.in, in_id_cyp: id_map.in} as replaces
with cxn, cx, nLg, edge_type, apoc.map.merge(replaces, {on_create_set: '{index:item_map.index, status:$status_create, createdAt:datetime(), batchCreatedAt:dt}'}) as replaces
with cxn, cx, nLg, edge_type, apoc.map.merge(replaces, {on_match_set: '{status:$status_match}'}) as replaces
with *, '
with item_map as item_map, $cx as cx, $dt as dt
with *, <<in_id_cyp>> as id_in, <<out_id_cyp>> as id_out
//MERGE(t:TEST {identifier:"<<edge_type>>/out="+coalesce(id_out,"null")+"/in="+coalesce(id_in,"null")})
where not id_out is null and not id_in is null
with *
MATCH(out:<<type_out>> {identifier:id_out})
MATCH(in:<<type_in>> {identifier:id_in})
MERGE(out)-[e:<<edge_type>>]->(in)
on create set e += <<on_create_set>>
on match set e += <<on_match_set>>
' as str
with *, reduce(s=str, x in keys(replaces) | replace(s,'<<'+x+'>>',replaces[x])) as action
set nLg.comments=nLg.comments + [edge_type+' merge action = ' + action]
with *
CALL apoc.periodic.iterate(cx.iteration,action,{batchSize:10000, parallel:false,retries:5, iterateList:false, concurrency:0, failedParams:-1, params:{ status_create:cx.status.new,  status_match:cx.status.actual, dt:nLg.dt, items:cx.cyp_lines, cx:cx}}) YIELD batches,total, timeTaken, committedOperations, failedOperations, failedBatches, retries, errorMessages, batch, operations, wasTerminated
with *, apoc.convert.toString({batches:batches,total:total, timeTaken: timeTaken, committedOperations: committedOperations, failedOperations: failedOperations, failedBatches: failedBatches, retries:retries, errorMessages:errorMessages}) as res_map_str

CALL apoc.create.setProperty(nLg,'step_4_'+edge_type+'_merge',res_map_str) yield node
with cx, COLLECT(edge_type) as coll

return cx
