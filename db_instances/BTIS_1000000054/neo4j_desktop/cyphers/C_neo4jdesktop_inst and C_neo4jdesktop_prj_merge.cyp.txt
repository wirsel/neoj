//C_neo4jdesktop_inst + C_neo4jdesktop_prj
//https://github.com/wirsel/neoj/blob/master/db_instances/BTIS_1000000054/neo4j_desktop/cyphers/C_neo4jdesktop_inst%20and%20C_neo4jdesktop_prj_merge.cyp.txt

:param c => { 
    level1:{ 
        label: "C_neo4jdesktop_inst",
        space: "S_neo4j",
        cyphers: { 
        	id: 'with *, "BTIS_1000000054" as id'
        }
    },
	edge12: {
        edgetype: "CONTAINS_PRJ"   
    },
    level2:{ 
        label: "C_neo4jdesktop_prj",
        space: "S_neo4j"
    },
 	edge23: {
        edgetype: "CONTAINS_DB"   
    },   
    level3:{ 
        label: "C_neo4j_db_inst",
        space: "S_neo4j"
    }, 
 	edge34: {
        edgetype: "HAS_STATISTICS"   
    },     
    level4:{ 
        label: "C_neo4j_db_inst_stat",
        space: "S_neo4j"
    }
  };
  
 // Step: mark_for_update
//with $c as c
with *, apoc.map.flatten(c) as cf
with *, c.steps.mark_for_update.types as buf1
with *, [x in buf1 | CASE WHEN left(x,4)="$cf." THEN coalesce(cf[replace(x,"$cf.","")],x) ELSE x END ] as buf2
with *, [x in buf2 | CASE WHEN left(x,4)="$cf." THEN coalesce(cf[replace(x,"$cf.","")+".name"],x) ELSE x END ] as types_for_update

with *, c.steps.mark_for_update.key as key, c.steps.mark_for_update.value as value 
UNWIND range(0, size(types_for_update)-1) as x
with *, types_for_update[x] as type
with * , replace( 'MATCH(n:<<type>>) where not properties(n)[$key]=$value return n','<<type>>',type) as iteration
with * , 'CALL apoc.create.setProperty(n, $key, $value) yield node return node' as action

CALL apoc.periodic.iterate(iteration, action, {params:{key:key,value:value}, batchSize:10000, iterateList:true}) yield batches, total, timeTaken, committedOperations, failedOperations, failedBatches, retries, errorMessages, batch, operations,wasTerminated
with *, {batches: batches, total: total, timeTaken: timeTaken, committedOperations: committedOperations, failedOperations: failedOperations, failedBatches: failedBatches, retries: retries, errorMessages: errorMessages, batch: batch, operations: operations, wasTerminated: wasTerminated} as res
with c,cf, COLLECT(res) as  results_types
return results_types;

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//================================C_neo4jdesktop_inst======================================================
with $c as c
with *, "BTIS_1000000054" as device
CALL apoc.merge.node([c.level1.label],{identifier: device},{ type: c.level1.label, name: device} ) yield node
CALL apoc.create.addLabels([node],[c.level1.space] ) yield node as d
with c,d

with *, "w:/" as path
With *, "projects.json" as prjFile
with *, "file:///" as protocol

//================================C_neo4jdesktop_prj======================================================
//LOAD CSV FROM protocol+file as line
Call apoc.load.json(protocol+path+prjFile) yield value as map
with *,  keys(map) as project_ids

UNWIND range(0, size(project_ids) -1 ) as x
with *, map[project_ids[x]] as prj_map
CALL apoc.merge.node(
    [c.level2.label],
    {identifier: prj_map.id}, 
    { 
        type: c.level2.label,  
        uuid: replace(prj_map.id,"project-",""), 
        name: prj_map.name, 
        createdAt: prj_map.createdAt 
    } ) yield node 
CALL apoc.create.addLabels([node],[c.level2.space] ) yield node as prj
with c, d, prj
CALL apoc.merge.relationship(d,c.edge12.edgetype,{},{},prj) yield rel
with COLLECT(prj.identifier) as prjs_id
return prjs_id;

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//================================C_neo4j_db_inst======================================================
with $c as c
with *, "w:/" as path
with *, "databases.json" as dbFile
with *, "file:///" as protocol
Call apoc.load.json(protocol+path+dbFile) yield value as map
with *,  keys(map) as dbs_map

UNWIND range(0, size(dbs_map) -1 ) as x
with *, map[dbs_map[x]] as db_map

CALL apoc.merge.node(
    [c.level3.label],
    {identifier: db_map.id}, 
	{ 
       type: c.level3.label,
       uuid :  replace(db_map.id,"database-",""),
       version: db_map.version,
       edition: db_map.edition,
       projectId: db_map.projectId,
       name: db_map.name,
       description: db_map.description,
       createdAt :  db_map.createdAt,
       isValidPassword :  db_map.isValidPassword,
       dirtySettings :  db_map.dirtySettings
     }) yield node 
CALL apoc.create.addLabels([node],[c.level3.space] ) yield node as db
with c,  db

With COLLECT(db.identifier) as dbs_id
return dbs_id;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//=======C_neo4jdesktop_prj-[CONTAINS_DB]->C_neo4j_db_inst==
with $c as c
with *, "w:/" as path
with *, "databases.json" as dbFile
with *, "file:///" as protocol
Call apoc.load.json(protocol+path+dbFile) yield value as map
with *,  keys(map) as dbs_map

UNWIND range(0, size(dbs_map) -1 ) as x
with *, map[dbs_map[x]] as db_map
with *, replace('MATCH( db: <<type>> {identifier:$id}) return db','<<type>>',c.level3.label) as cyp
CALL apoc.cypher.run(cyp,{id:db_map.id}) yield value 
with c, value.db as db
with *, replace('MATCH( prj: <<type>> {identifier:$id}) return prj','<<type>>',c.level2.label) as cyp
CALL apoc.cypher.run(cyp,{id:db.projectId}) yield value 
with c, db, value.prj as prj

CALL apoc.merge.relationship(prj,c.edge23.edgetype,{},{},db) yield rel
return collect(rel);


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//================================C_neo4j_db_inst_stat================
with $c as c
with *, "w:/" as path
with *, "databases.json" as dbFile
with *, "file:///" as protocol
Call apoc.load.json(protocol+path+dbFile) yield value as map
with *,  keys(map) as dbs_map
with *, datetime() as dt

UNWIND range(0, size(dbs_map) -1 ) as x
with *, map[dbs_map[x]] as db_map
with *, replace('MATCH( db: <<type>> {identifier:$id}) return db','<<type>>',c.level3.label) as cyp
CALL apoc.cypher.run(cyp,{id:db_map.id}) yield value 
with c, dt, db_map, value.db as db

with *, apoc.convert.toString(dt)+"/"+db_map.id as id
CALL apoc.merge.node(
    [c.level4.label],
    {identifier: id}, 
	{ 
       	type: c.level4.label,
		name: id,
        nodesCount: tointeger(db_map.statistics.nodesCount),
        relationshipsCount: tointeger(db_map.statistics.relationshipsCount),
        labelsCount: tointeger(db_map.statistics.labelsCount),
        relationshipTypesCount: tointeger(db_map.statistics.relationshipTypesCount)
     }) yield node 
CALL apoc.create.addLabels([node],[c.level4.space] ) yield node as dbs
with c, dbs, db

CALL apoc.merge.relationship(db,c.edge34.edgetype,{},{},dbs) yield rel
With COLLECT(dbs.identifier) as dbss_id
return dbss_id;
