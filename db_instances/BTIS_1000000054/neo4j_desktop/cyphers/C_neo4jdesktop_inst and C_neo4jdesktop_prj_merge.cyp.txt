//C_neo4jdesktop_inst + C_neo4jdesktop_prj
//https://github.com/wirsel/neoj/blob/master/db_instances/BTIS_1000000054/neo4j_desktop/cyphers/C_neo4jdesktop_inst%20and%20C_neo4jdesktop_prj_merge.cyp.txt

:param c => { 
    level1:{ 
        label: "C_neo4jdesktop_inst",
        space: "S_neo4j"
    },
	level12: {
        edgetype: "CONTAINS_PRJ"   
    },
    level2:{ 
        label: "C_neo4jdesktop_prj",
        space: "S_neo4j"
    },
    level3:{ 
        label: "C_neo4j_db_inst",
        space: "S_neo4j"
    }, 
    level4:{ 
        label: "C_neo4j_db_inst_stat",
        space: "S_neo4j"
    }
  };

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//================================C_neo4jdesktop_inst======================================================
with $c as c
with *, "BTIS_1000000054" as device
CALL apoc.merge.node([c.level1.label],{identifier: device},{ type: c.level1.label, name: device} ) yield node
CALL apoc.create.addLabels([node],[c.level1.space] ) yield node as d
with c,d

with *, "w:/" as path
With *, "projects.json" as prjFile
with *, "file:///" as protocol

//================================C_neo4jdesktop_prj======================================================
//LOAD CSV FROM protocol+file as line
Call apoc.load.json(protocol+path+prjFile) yield value as map
with *,  keys(map) as project_ids

UNWIND range(0, size(project_ids) -1 ) as x
with *, map[project_ids[x]] as prj_map
CALL apoc.merge.node(
    [c.level2.label],
    {identifier: prj_map.id}, 
    { 
        type: c.level2.label,  
        uuid: replace(prj_map.id,"project-",""), 
        name: prj_map.name, 
        createdAt: prj_map.createdAt 
    } ) yield node 
CALL apoc.create.addLabels([node],[c.level2.space] ) yield node as prj
with c, d, prj
CALL apoc.merge.relationship(d,c.level12.edgetype,{},{},prj) yield rel
with COLLECT(prj.identifier) as prjs_id
return prjs_id;

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//================================C_neo4j_db_inst======================================================
with "w:/" as path
with *, "databases.json" as dbFile
with *, "file:///" as protocol
Call apoc.load.json(protocol+path+dbFile) yield value as map
with *,  keys(map) as dbs_map

UNWIND range(0, size(dbs_map) -1 ) as x
with *, map[dbs_map[x]] as db_map
MERGE( db: C_neo4j_db_inst {identifier:db_map.id})
set db.type="C_neo4j_db_inst"
set db.uuid = replace(db.identifier,"database-","")
set db.version=db_map.version
set db.edition=db_map.edition
set db.projectId=db_map.projectId
set db.name=db_map.name
set db.description=db_map.description
set db.createdAt = db_map.createdAt
set db.isValidPassword = db_map.isValidPassword
set db.dirtySettings = db_map.dirtySettings
set db:S_neo4j
With COLLECT(db.identifier) as dbs_id
return dbs_id;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//=======C_neo4jdesktop_prj-[CONTAINS_DB]->C_neo4j_db_inst==
with "w:/" as path
with *, "databases.json" as dbFile
with *, "file:///" as protocol
Call apoc.load.json(protocol+path+dbFile) yield value as map
with *,  keys(map) as dbs_map

UNWIND range(0, size(dbs_map) -1 ) as x
with *, map[dbs_map[x]] as db_map
MATCH( db: C_neo4j_db_inst {identifier:db_map.id})
with db
MATCH( prj: C_neo4jdesktop_prj {identifier:db.projectId})
with db, prj
MERGE(prj)-[e:CONTAINS_DB]->(db)
return collect(e);

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//================================C_neo4j_db_inst_stat================
with "w:/" as path
with *, "databases.json" as dbFile
with *, "file:///" as protocol
Call apoc.load.json(protocol+path+dbFile) yield value as map
with *,  keys(map) as dbs_map
with *, datetime() as dt

UNWIND range(0, size(dbs_map) -1 ) as x
with *, map[dbs_map[x]] as db_map
MATCH(db:C_neo4j_db_inst {identifier:db_map.id})
with *
MERGE(dbs: C_neo4j_db_inst_stat {identifier:apoc.convert.toString(dt)+"/"+db_map.id})
set dbs.type="C_neo4j_db_inst_stat"
set dbs.name= dbs.identifier
set dbs.nodesCount= tointeger(db_map.statistics.nodesCount)
set dbs.relationshipsCount= tointeger(db_map.statistics.relationshipsCount)
set dbs.labelsCount= tointeger(db_map.statistics.labelsCount)
set dbs.relationshipTypesCount= tointeger(db_map.statistics.relationshipTypesCount)
set dbs:S_neo4j
MERGE(db)-[e:HAS_STATISTICS]->(dbs)
With COLLECT(dbs.identifier) as dbss_id
return dbss_id;return prjs_id
